#!/bin/bash

set -e

echo "=== Complete Connectivity Fix for Kubernetes Cluster ==="
echo ""

# Instance information
MASTER_DNS="ec2-51-20-43-244.eu-north-1.compute.amazonaws.com"
WORKER1_DNS="ec2-16-170-98-124.eu-north-1.compute.amazonaws.com"
WORKER2_DNS="ec2-51-21-255-93.eu-north-1.compute.amazonaws.com"

MASTER_IP="21.32.12.44"
WORKER1_IP="21.32.15.122"
WORKER2_IP="21.32.15.123"

KEY_PATH="/home/ju-nine/Downloads/gis-openstack-m07-y25-ec2-principal20250729104020211200000003(1).pem"

echo "Instance Information:"
echo "Master: $MASTER_DNS ($MASTER_IP)"
echo "Worker-1: $WORKER1_DNS ($WORKER1_IP)"
echo "Worker-2: $WORKER2_DNS ($WORKER2_IP)"
echo ""

echo "=== APPROACH 1: AWS Console Security Group Fix ==="
echo ""
echo "1. Open AWS Console: https://console.aws.amazon.com/ec2/v2/home?region=eu-north-1#Instances:sort=instanceId"
echo ""
echo "2. For EACH instance (Master, Worker-1, Worker-2):"
echo "   a. Select the instance"
echo "   b. Click on Security Group link (in Security tab)"
echo "   c. Click 'Edit inbound rules'"
echo "   d. Click 'Add rule'"
echo "   e. Configure:"
echo "      - Type: All traffic"
echo "      - Protocol: All"
echo "      - Port range: All"
echo "      - Source: Custom"
echo "      - Security group: Select the SAME security group"
echo "   f. Click 'Save rules'"
echo ""

echo "=== APPROACH 2: Alternative - Allow All Internal Traffic ==="
echo ""
echo "If Approach 1 doesn't work, try this:"
echo "1. Go to Security Groups in AWS Console"
echo "2. Find the security group attached to your instances"
echo "3. Add these specific rules:"
echo ""
echo "   Rule 1:"
echo "   - Type: All traffic"
echo "   - Protocol: All"
echo "   - Port range: All"
echo "   - Source: 21.32.12.0/22 (subnet CIDR)"
echo ""
echo "   Rule 2:"
echo "   - Type: All ICMP - IPv4"
echo "   - Protocol: All"
echo "   - Port range: All"
echo "   - Source: 21.32.12.0/22"
echo ""

echo "=== APPROACH 3: Network ACL Check ==="
echo ""
echo "If security groups are correct, check Network ACLs:"
echo "1. Go to VPC > Network ACLs"
echo "2. Find the NACL attached to your subnet"
echo "3. Ensure inbound rules allow:"
echo "   - Rule 100: All traffic (0.0.0.0/0)"
echo "   - Rule 200: All traffic (21.32.12.0/22)"
echo ""

echo "=== APPROACH 4: Route Table Check ==="
echo ""
echo "Check if instances can route to each other:"
echo "1. Go to VPC > Route Tables"
echo "2. Find the route table for your subnet"
echo "3. Ensure it has a route to 21.32.12.0/22 via local"
echo ""

echo "=== Testing Commands ==="
echo ""
echo "After making changes, test connectivity:"
echo ""

echo "Test 1: Ping from worker to master"
echo "ssh -i $KEY_PATH ubuntu@$WORKER1_DNS 'ping -c 5 $MASTER_IP'"
echo ""

echo "Test 2: Port connectivity test"
echo "ssh -i $KEY_PATH ubuntu@$WORKER1_DNS 'timeout 5 bash -c \"</dev/tcp/$MASTER_IP/6443\" && echo \"✅ Port 6443 reachable\" || echo \"❌ Port 6443 blocked\"'"
echo ""

echo "Test 3: Traceroute to see where packets are lost"
echo "ssh -i $KEY_PATH ubuntu@$WORKER1_DNS 'traceroute $MASTER_IP'"
echo ""

echo "=== Current Status ==="
echo ""
echo "Testing current connectivity..."

# Test current connectivity
echo "Ping test from worker to master:"
ssh -o StrictHostKeyChecking=no -i "$KEY_PATH" ubuntu@$WORKER1_DNS "ping -c 3 $MASTER_IP" || echo "❌ Ping failed"

echo ""
echo "Port 6443 test:"
ssh -o StrictHostKeyChecking=no -i "$KEY_PATH" ubuntu@$WORKER1_DNS "timeout 5 bash -c '</dev/tcp/$MASTER_IP/6443' && echo '✅ Port 6443 reachable' || echo '❌ Port 6443 blocked'" || echo "❌ Port test failed"

echo ""
echo "=== Quick Fix Commands ==="
echo ""
echo "If you want to try a quick fix, run these commands on each instance:"
echo ""
echo "On Master:"
echo "ssh -i $KEY_PATH ubuntu@$MASTER_DNS 'sudo iptables -I INPUT -s 21.32.12.0/22 -j ACCEPT'"
echo ""
echo "On Worker-1:"
echo "ssh -i $KEY_PATH ubuntu@$WORKER1_DNS 'sudo iptables -I INPUT -s 21.32.12.0/22 -j ACCEPT'"
echo ""
echo "On Worker-2:"
echo "ssh -i $KEY_PATH ubuntu@$WORKER2_DNS 'sudo iptables -I INPUT -s 21.32.12.0/22 -j ACCEPT'"
echo ""

echo "=== After Fixing Connectivity ==="
echo ""
echo "Once connectivity is working, join worker nodes:"
echo "./join_worker_nodes.sh"
echo ""
echo "Or manually:"
echo "ssh -i $KEY_PATH ubuntu@$WORKER1_DNS 'sudo kubeadm join $MASTER_IP:6443 --token [TOKEN] --discovery-token-ca-cert-hash [HASH] --ignore-preflight-errors=all'" 